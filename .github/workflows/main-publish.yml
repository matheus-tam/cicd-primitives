name: Main CiCd Workflow
run-name: Generic CiCd pipeline
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      folder_dev:
        required: true
        type: string
      folder_uat:
        required: true
        type: string
      folder_prd:
        required: true
        type: string
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
jobs:
  Get-CiCd-Primitives:
    runs-on: uipath-cli
    steps:
      - name: Checkout the latest version of the CiCd primitives
        uses: actions/checkout@v3
        with:
           repository: Test-Organisation-FCC/cicd-primitives
           ref: main
           path: CiCd
      - name: Display SHA of commit
        shell: pwsh
        run: Write-Host ( "Change in branch? ${{ github.head_ref || github.ref_name }}" + " ${{github.sha}}".Substring(0, 8) )
  Prepare-Environment:
    needs: Get-CiCd-Primitives
    runs-on: uipath-cli
    outputs:
      tenantName: ${{ steps.envvars.outputs.tenantName }}
      folderName: ${{ steps.envvars.outputs.folderName }}
      baseurl: ${{ steps.baseurl.outputs.baseurl }}
    steps:
      - name: Check that the CLI is installed
        shell: pwsh
        run: gcm uipcli
      - name: List files in the folder
        shell: pwsh
        run: dir
      - name: Display project and environment name
        shell: pwsh
        run: |
          . .\CiCd\CiCdFunctions.ps1
          $processName = GetProcessName
          "PROCESS_NAME=$processName" >> $env:GITHUB_ENV
          Write-Host "Building $processName for environment: ${{ inputs.environment }}"
      - name: Get environment variables
        id: envvars
        shell: pwsh
        run: |
          if ( "${{ inputs.environment }}" -eq "dev")
          {
            $tenantName = "${{ vars.TENANT_NAME_DEV }}"
            $folderName = "${{ inputs.folder_dev }}"
          }
          if ( "${{ inputs.environment }}" -eq "uat")
          {
            $tenantName = "${{ vars.TENANT_NAME_UAT }}"
            $folderName = "${{ inputs.folder_uat }}"
          }
          if ( "${{ inputs.environment }}" -eq "prd")
          {
            $tenantName = "${{ vars.TENANT_NAME_PRD }}"
            $folderName = "${{ inputs.folder_prd }}"
          }
          "TENANT_NAME=$tenantName" >> $env:GITHUB_ENV
          "tenantName=$tenantName" >> $env:GITHUB_OUTPUT
          "folderName=$folderName" >> $env:GITHUB_OUTPUT
          Write-Host "Working on Organisation: ${{ vars.ORG_NAME }} Tenant: ${tenantName} Folder: $folderName"
  Run-Checks-And-Workflow-Analyzer:
    needs: [Prepare-Environment]
    runs-on: uipath-cli
    outputs:
      finalVersionProcess: ${{ steps.finalVersionProcess.outputs.finalVersionProcess }}
    env:
      BASE_URL: ${{needs.Prepare-Environment.outputs.baseurl}}
      TENANT_NAME: ${{needs.Prepare-Environment.outputs.tenantName}}
      FOLDER_NAME: ${{needs.Prepare-Environment.outputs.folderName}}
    steps:
      - name: Run workflow analyzer
        shell: pwsh
        run: |
          . .\CiCd\CiCdFunctions.ps1
          $BASE_URL = "${{ vars.BASE_URL }}"
          uipcli package analyze "$pwd\project.json" --analyzerTraceLevel "Error" --orchestratorUrl "${{ vars.BASE_URL }}" --orchestratorTenant "${{ env.TENANT_NAME }}" --orchestratorAccountForApp  "${{ vars.ORG_NAME }}" --orchestratorApplicationId  "${{ secrets.CLIENT_ID }}" --orchestratorApplicationSecret "${{ secrets.CLIENT_SECRET }}" --orchestratorApplicationScope "${{ vars.SCOPES }}"
  Build-Packages:
    needs: [Prepare-Environment, Run-Checks-And-Workflow-Analyzer]
    runs-on: uipath-cli
    outputs:
      nugetPath: ${{ steps.nugetPath.outputs.nugetPath }}
      nugetTestPath: ${{ steps.nugetTestPath.outputs.nugetTestPath }}
    env:
      BASE_URL: ${{needs.Prepare-Environment.outputs.baseurl}}
      TENANT_NAME: ${{needs.Prepare-Environment.outputs.tenantName}}
      FOLDER_NAME: ${{needs.Prepare-Environment.outputs.folderName}}
      #FINAL_VERSION_PROCESS: ${{needs.Run-Checks-And-Workflow-Analyzer.outputs.finalVersionProcess}}
    steps:
      - name: Build Package
        id: nugetPath
        shell: pwsh
        run: |
          . .\CiCd\CiCdFunctions.ps1
          $shortSHA = "${{github.sha}}".Substring(0, 7)
          uipcli package pack "$pwd\project.json" -o "${{ github.workspace }}\package" --libraryOrchestratorUrl ${{ vars.BASE_URL }} --libraryOrchestratorAccountForApp "${{ secrets.CLIENT_ID }}"  --libraryOrchestratorApplicationId "${{ secrets.CLIENT_ID }}" --libraryOrchestratorApplicationSecret "${{ secrets.CLIENT_SECRET }}" --libraryOrchestratorApplicationScope "${{ vars.SCOPES }}" --libraryOrchestratorTenant "${{ env.TENANT_NAME }}" --libraryOrchestratorFolder "${{ env.FOLDER_NAME }}" --releaseNotes "${{ github.event.head_commit.message }}"

      # - name: Build Test Package
      #   id: nugetTestPath
      #   shell: pwsh
      #   run: |
      #     . .\CiCd\CiCdFunctions.ps1
      #     $shortSHA = "${{github.sha}}".Substring(0, 7)
      #     uipcli package pack "$pwd\project.json" -o ${{ github.workspace }}\package --outputType Tests --libraryOrchestratorUrl ${{ env.BASE_URL }} --libraryOrchestratorApplicationId "${{ secrets.CLIENT_ID }}" --libraryOrchestratorApplicationSecret "${{ secrets.CLIENT_SECRET }}" --libraryOrchestratorApplicationScope "${{ vars.SCOPES }}" --libraryOrchestratorTenant "${{ env.TENANT_NAME }}" --libraryOrchestratorFolder "${{ env.FOLDER_NAME }}" --releaseNotes "${{ github.event.head_commit.message }}"

        
  Upload-Packages:
    needs: [Prepare-Environment, Build-Packages]
    runs-on: uipath-cli
    env:
      BASE_URL: ${{needs.Prepare-Environment.outputs.baseurl}}
      TENANT_NAME: ${{needs.Prepare-Environment.outputs.tenantName}}
      FOLDER_NAME: ${{needs.Prepare-Environment.outputs.folderName}}
      # NUGET_PATH: ${{needs.Build-Packages.outputs.nugetPath}}
      # NUGET_TEST_PATH: ${{needs.Build-Packages.outputs.nugetTestPath}}
    steps:
      - name: Publish Nuget Package
        shell: pwsh
        run: |
          . .\CiCd\CiCdFunctions.ps1
          $shortSHA = "${{github.sha}}".Substring(0, 7)
          uipcli package deploy ${{ github.workspace }}\package "${{vars.BASE_URL}}" "${{env.TENANT_NAME}}" -A "${{vars.ORG_NAME}}" -I "${{ secrets.CLIENT_ID }}" -S "${{ secrets.CLIENT_SECRET }}" --applicationScope "${{ vars.SCOPES }}" -o "${{ env.FOLDER_NAME }}" --traceLevel Information
      
  Run-Tests:
    needs: [Prepare-Environment, Build-Packages, Upload-Packages]
    if: inputs.environment == 'uat'
    runs-on: uipath-cli
    env:
      BASE_URL: ${{needs.Prepare-Environment.outputs.baseurl}}
      TENANT_NAME: ${{needs.Prepare-Environment.outputs.tenantName}}
      FOLDER_NAME: ${{needs.Prepare-Environment.outputs.folderName}}
    steps:
      - name: Run Test Process
        shell: pwsh
        run: |
          . .\CiCd\CiCdFunctions.ps1
          uipcli test run "${{ vars.BASE_URL }}" "${{ env.TENANT_NAME }}" --accountForApp "${{ vars.ORG_NAME }}" --applicationId "${{ secrets.CLIENT_ID }}" --applicationSecret "${{ secrets.CLIENT_SECRET }}" --applicationScope "${{ vars.SCOPES }}" --testset "TestSet" -o "${{ env.FOLDER_NAME }}" --out uipath -r "$pwd\test_result.json"
          exit InterpretTestResults -testResults "$pwd\test_result.json"
          
